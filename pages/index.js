import Head from 'next/head';
import Layout from '../components/layout';
import { Typography } from '@mui/material';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import { useState, useContext } from 'react';
import Image from 'next/image';
import Grid from '@mui/material/Grid';
import {
  getFirestore, collection,
  addDoc, serverTimestamp
} from 'firebase/firestore'
import { AuthContext } from '../contexts/AuthContext'

export default function Home() {
  const [selectedImage, setSelectedImage] = useState(null)
  const [resultEmotion, setResultEmotion] = useState("nothing")
  const [emotionScore, setEmotionScore] = useState(0)
  const [recommendation, setRecommendation] = useState()

  // get user id to add data to database
  const { currentUser } = useContext(AuthContext)

  // init database
  const db = getFirestore()
  // collection reference
  const colRef = collection(db, "emotions")

  const addData = async (emotion) => {
    addDoc(colRef, {
      createdAt: serverTimestamp(),
      emotion: emotion,
      userId: currentUser.uid,
    })
  }

  // encode image to base64
  const toBase64 = (file) =>
    new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });

  // send encoded image to emotion api
  const getEmotion = async (url_emotion, codedImage, url_recom_base) => {
    const response = await fetch(url_emotion, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ "encodedImage": codedImage })
    })
    let data = await response.json()
    setResultEmotion(data.emotion)
    setEmotionScore(data.score)
    addData(data.emotion)
    if (data.emotion != null) {
      const response_recom = await fetch(url_recom_base + data.emotion)
      let data_recom = await response_recom.json()
      setRecommendation(data_recom.answer)
    } else {
      setRecommendation("The model cant detect any emotion")
    }

  }

  const url_emo = "https://powerful-plains-46454.herokuapp.com/uploadImage"
  const url_recom_base = "https://smile-emotion-recognition.herokuapp.com/recom/"

  const getRecommendation = async (file) => {
    toBase64(file)
      .then((result) => {
        getEmotion(url_emo, result, url_recom_base)
      })
  }

  return (
    <Layout>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* this will be build in later */}


      <Grid
        container
        spacing={0}
        direction="column"
        alignItems="center"
        justify="center"
      >
        <Typography variant="h4">Home</Typography>
        <Stack
          direction={{ xs: 'column', sm: 'row' }}
          spacing={{ xs: 1, sm: 2, md: 4 }}
        >
          <Typography component="div">Emotion: <Box sx={{ fontWeight: "bold" }} display="inline">{resultEmotion}</Box> </Typography>
          <Typography component="div">Score: <Box sx={{ fontWeight: "bold" }} display="inline">{emotionScore}</Box> </Typography>
        </Stack>
        <Typography component="div">Recommendation: <Box sx={{ fontWeight: "bold" }} display="inline">{recommendation}</Box> </Typography>

        {selectedImage == null ?
          <Typography>No Image selected yet</Typography> :
          <Image alt="not fount" width="256" height="256" src={URL.createObjectURL(selectedImage)} />
        }
        <br />
        <Stack direction="row" spacing={2}>
          <input
            accept="image/*"
            type="file"
            name="myImage"
            id="image-button-file"
            onChange={(event) => {
              let file = event.target.files[0]
              setSelectedImage(file)
            }}
            hidden
          />
          <label htmlFor="image-button-file">
            <Button variant="contained" component="span">Upload</Button>
          </label>
          <Button variant="contained" onClick={() => {
            setSelectedImage(null)
            setRecommendation("")
            setEmotionScore(0)
            setResultEmotion("nothing")
          }}>
            Remove image
          </Button>
        </Stack>
        <Button sx={{ mt: 3 }} variant="contained" onClick={() => {
          if (selectedImage == null) {
            alert("no image selected yet")
          } else {
            getRecommendation(selectedImage)
          }
        }}>
          Get recommendation
        </Button>
      </Grid>


    </Layout>
  )
}