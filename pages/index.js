import Head from "next/head";
import Layout from "../components/layout";
import { Card, Typography } from "@mui/material";
import Box from "@mui/material/Box";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import { useState, useContext } from "react";
import Image from "next/image";
import Grid from "@mui/material/Grid";
import {
  getFirestore,
  collection,
  addDoc,
  serverTimestamp,
} from "firebase/firestore";
import { AuthContext } from "../contexts/AuthContext";
import Emotionmeter from "../components/emotionmeter";
import WindowWidth from "../contexts/Bgcontext";

export default function Home() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [resultEmotion, setResultEmotion] = useState("nothing");
  const [emotionScore, setEmotionScore] = useState(0);
  const [recommendation, setRecommendation] = useState();

  // get user id to add data to database
  const { currentUser } = useContext(AuthContext);

  // init database
  const db = getFirestore();
  // collection reference
  const colRef = collection(db, "emotions");

  const addData = async (emotion) => {
    addDoc(colRef, {
      createdAt: serverTimestamp(),
      emotion: emotion,
      userId: currentUser.uid,
    });
  };

  // encode image to base64
  const toBase64 = (file) =>
    new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });

  // send encoded image to emotion api
  const getEmotion = async (url_emotion, codedImage, url_recom_base) => {
    const response = await fetch(url_emotion, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ encodedImage: codedImage }),
    });
    let data = await response.json();
    setResultEmotion(data.emotion);
    setEmotionScore(data.score);
    addData(data.emotion);
    if (data.emotion != null) {
      const response_recom = await fetch(url_recom_base + data.emotion);
      let data_recom = await response_recom.json();
      setRecommendation(data_recom.answer);
    } else {
      setRecommendation("The model cant detect any emotion");
    }
  };

  const url_emo = "https://powerful-plains-46454.herokuapp.com/uploadImage";
  const url_recom_base =
    "https://smile-emotion-recognition.herokuapp.com/recom/";

  const getRecommendation = async (file) => {
    toBase64(file).then((result) => {
      getEmotion(url_emo, result, url_recom_base);
    });
  };

  //set background images
  const imageUrl =
    WindowWidth >= 650
      ? "./background-white-mobile.jpg"
      : "./background-white.jpg";

  return (
    <Layout>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* this will be build in later */}
      <main color="primary.main">
        <Grid
          container
          spacing={0}
          direction="column"
          alignItems="center"
          justify="center"
          style={{ minHeight: "100vh" }}
          sx={{
            backgroundImage: `url(${imageUrl})`,
            backgroundRepeat: "no-repeat",
            backgroundSize: "cover",
          }}
        >
          <Card
            sx={{
              bgcolor: "primary.light",
              width: "32rem",
              pb: "1rem",
              pt: "1rem",
              mt: "3rem",
              mb: "3rem",
              borderRadius: "1rem",
              border: "0.3rem solid",
              borderColor: "primary.main",
            }}
          >
            <Typography
              sx={{
                fontSize: 16,
                ml: "8rem",
                fontStyle: "bold",
              }}
              color="text.secondary"
              gutterBottom
            >
              <b> Please take or upload a picture! </b>
            </Typography>
          </Card>

          {/* Buttons */}
          <Stack
            direction={{ xs: "column", sm: "row" }}
            spacing={{ xs: 1, sm: 2, md: 4 }}
          >
            <label htmlFor="image-button-file">
              <Button variant="contained" component="span">
                Upload
              </Button>
            </label>
            <Button
              variant="outlined"
              onClick={() => {
                setSelectedImage(null);
                setRecommendation("");
                setEmotionScore(0);
                setResultEmotion("nothing");
              }}
            >
              Remove image
            </Button>
          </Stack>

          <Button
            sx={{ mt: 3 }}
            variant="contained"
            color="dark"
            onClick={() => {
              if (selectedImage == null) {
                alert("no image selected yet");
              } else {
                getRecommendation(selectedImage);
              }
            }}
          >
            Get recommendation
          </Button>

          {/* Ausgabe: */}

          <Stack
            sx={{ mt: "4rem" }}
            direction={{ xs: "column", sm: "row" }}
            spacing={{ xs: 1, sm: "2rem", md: "4rem" }}
          >
            <div component="div" display="inline">
              <Emotionmeter emotion={resultEmotion} />
              <Typography>
                Emotion:{" "}
                <Box sx={{ fontWeight: "bold" }} display="inline">
                  {resultEmotion}
                </Box>
              </Typography>
            </div>

            <Typography component="div" sx={{ paddingTop: "1.5rem" }}>
              Score:{" "}
              <Box sx={{ fontWeight: "bold" }} display="inline">
                {emotionScore}
              </Box>
            </Typography>
          </Stack>

          <Typography component="div">
            Recommendation:{" "}
            <Box sx={{ fontWeight: "bold" }} display="inline">
              {recommendation}
            </Box>
          </Typography>

          {selectedImage == null ? (
            <Typography>No Image selected yet</Typography>
          ) : (
            <Image
              alt="not fount"
              width="256"
              height="256"
              src={URL.createObjectURL(selectedImage)}
            />
          )}
          <br />
          <Stack direction="row" spacing={2}>
            <input
              accept="image/*"
              type="file"
              name="myImage"
              id="image-button-file"
              onChange={(event) => {
                let file = event.target.files[0];
                setSelectedImage(file);
              }}
              hidden
            />
          </Stack>
        </Grid>
      </main>
    </Layout>
  );
}
